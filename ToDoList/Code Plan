class List:
    - ToDoListApp: To Do List Application
    - Tasks: Handles data management for individual
    - Task: Represents an individual task
    - Table: Sets up the table listing the tasks in alphabetical order
    - Window: Setting up the window for the app
    - Sidebar: It is the sidebar for the features the application will show
    - Settings
    - TaskHistory
    - TaskForm
  
ToDoListApp:
    - Main application controller
    - initialize the main window, manage navigation between pages, and hold references
    - Reference to Tasks, Sidebar, and Table
    - Methods
  
Tasks:
    - Manages data for individual tasks
    - Store task information (name, id, duedate, priority, status)
    - Methods: addTask(task_data), remove_task(taskid), updatetask(task_id, new_data), getalltasks

Table:
    - Display tasks in a table format within the GUI
    - Method: load_task(task_list), refresh(), getselectedtask()

Window:
    - main container for the application's visual components
    - References sidebar, table
    - methods: initializelayout(), show()
  
sidebar:
    - contains the features of the application (overview, history, settings)
    - methods: addbutton(label, callback), highlightbutton(label)

task:
    - represents an individual task
    - name, due date, priority, status
    -  methods: updatestatus(), updatepriority()

settings:
    - contains the settings for the application
    - stores and retrieves settings such as themes, preferred sorting method, or default priorites
    - methods: loadsettings, savesettings, getsettings(key)

taskhistory:
    - stores the history of tasks
    - keep a record of tasks marked as complete
    - methods: addtohistory(task), clearhistory

taskform:
    - form for adding or editing a task
    -  contains fields for name, due date, priority, and status
    -  methods: oopen_form(task=None), savetasks

